--주석 comment 
-- C(Create) R(Read) U(Update) D(Delete)
-- DML (Data Manipulation)조작어/ DDL 처리어/ DCL 정의어
--INSERT / SELECT /UPDATE /DELETE  sql에서 가장 많이쓰는 명령어 4개
--WHERE = 조건
-- * = 모든
--SELECT Column FROM 테이블명 WHERE 조건 
SELECT * FROM EMP;
SELECT ENAME,JOB FROM EMP;
SELECT * FROM EMP WHERE EMP.EMPNO =7369; -- WHERE 은 조건문 
SELECT * FROM EMP WHERE EMP.ENAME = 'SMITH'; --문자는 '문자' 작은따옴표 안에 쓴다.
SELECT ENAME,SAL FROM EMP WHERE SAL >=2000; -- = 같다 != 다르다 >= <=
SELECT ENAME AS 이름,sal AS 연봉 FROM EMP WHERE SAL >=2000; -- AS로 Column명을 바꿀수있다. ENAME AS 이름 = ENAME을 이름으로 바꾼다.
SELECT ENAME,SAL,SAL*1.1 AS "10%인상된 연봉" FROM emp;
SELECT ENAME,SAL FROM emp WHERE SAL>=1000 AND SAL<=2000;
SELECT ENAME,SAL FROM emp WHERE SAL BETWEEN 1000 AND 2000;
--mybatis(xml) = 쿼리문과 개발코드를 분리시키려고하는것. 

SELECT ENAME FROM EMP WHERE ENAME LIKE 'S%'; --LIKE = 'S%' S로 시작하는 것 % = 나머지 S% = S로끝나는것. %S% S가포함된것 전부 
SELECT ENAME FROM EMP WHERE ENAME LIKE '%ER'; 


--DB TABLE colums명이 중복 되면 안됨 Realation 관계형 데이터베이스 rdbms 오라클 mysql 
--table 밑으로 내려가는건 걱정없다. 옆으로 확장(join)할때 어렵기때문에  처음만들때 설계를 잘해야함. 

SELECT DISTINCT DEPTNO AS 부서번호 FROM EMP ; --DISTINCT 중복제거 

SELECT CONCAT (ENAME,JOB) FROM EMP; --CONCAT(A,B) A와B를 합쳐줌  정석
SELECT ENAME || ' ''s job is' || JOB FROM EMP; --CONCAT(A,B)을 ||로도 쓸수있음  A와B를 합쳐줌 

SELECT ENAME AS 이름 ,SAL*12+COMM AS 연봉 FROM EMP;


--NULL 연산
--empno , ename, comm ,yes, no
SELECT EMPNO ,ENAME,COMM, NVL2(COMM,'YES','NO') AS "커미션 유무" FROM emp; -- NVL은 조작함수 NULL이면 YES 아니면 NO
--작은따옴표는 값을 나타낼때

SELECT * FROM EMP WHERE ENAME ='SMITH';
--큰따옴표는 문자 즉 식별자로 사용한다.

SELECT * FROM EMP ORDER BY SAL ASC ;  -- 정렬 ORDER BY ASC(DEFAULT 오름차순) ORDER BY DESC(내림차순)
SELECT * FROM EMP ORDER BY SAL ASC,DEPTNO ASC ; 두번정렬

SELECT ENAME FROM EMP WHERE DEPTNO=30;
SELECT ENAME FROM EMP WHERE DEPTNO=30 AND JOB='SALESMAN';
SELECT ENAME FROM EMP WHERE DEPTNO=30 AND JOB ='CLERK';
SELECT ENAME FROM EMP WHERE SAL*12>=30000;
SELECT ENAME FROM EMP WHERE ENAME>'F';
SELECT ENAME FROM EMP WHERE JOB='MANAGER' OR JOB='SALESMAN' OR JOB='CLERK';
SELECT ENAME FROM EMP WHERE JOB IN ('MANAGER','CLERK','SALESMAN');  -- IN(COLUMN,COLUMN,COLUMN) IN == OR 
SELECT ENAME FROM EMP WHERE JOB!='MANAGER' AND JOB^='SALESMAN' AND JOB<>'CLERK'; -- !=  ^=  <> 셋다 같은뜻 
SELECT ENAME FROM EMP WHERE JOB NOT IN ('MANAGER','CLERK','SALESMAN'); -- NOT IN == AND

SELECT ENAME FROM EMP WHERE ENAME LIKE '____S';   --언더바 = 자릿수를 따지는것 
SELECT ENAME FROM EMP WHERE ENAME LIKE '__A%';

SELECT ENAME,SAL FROM EMP WHERE SAL LIKE '1%'; --LIKE에숫자는 성능이 저하된다. 

--NVL1(column명,0) , nvl2(column명,null일때 출력,null이아닐때 출력)
SELECT ENAME AS 이름,SAL AS 월급,COMM FROM EMP WHERE COMM IS NULL; 
SELECT ENAME AS 이름,SAL AS 월급,COMM FROM EMP WHERE COMM IS NOT NULL; 

SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD') FROM DUAL;  -- DUAL  = 가상테이블 
SELECT * FROM DUAL;


WITH temp AS( --temp는 한번만 조회할수있음.
    SELECT 111 empno,'유재석' ename , 'talent' job FROM dual UNION ALL  --UNION ALL SELECT 2개를 하나로 집합 
    SELECT 222 empno,'박명수' ename , 'programmer' job FROM dual
)
SELECT * FROM temp;


--dept 20 , 30 부서에 근무하는 사람 중에 sal이 2000이상인사람
SELECT * FROM EMP WHERE DEPTNO = 20 AND SAL>=1000 --UNION ALL = A결과 +B의결과 합집합 중복허용  UNION = A결과 +B결과의 교집합의 역 으로 실행시 중복이 제거됨. 
UNION ALL   
SELECT * FROM EMP WHERE DEPTNO = 30 AND SAL>=1000;

SELECT * FROM EMP WHERE  SAL>=1000 
INTERSECT  
SELECT * FROM EMP WHERE DEPTNO = 30 ;

SELECT * FROM EMP WHERE  SAL>=1000 
MINUS 
SELECT * FROM EMP WHERE DEPTNO = 30 ;

--1
SELECT * FROM EMP WHERE ENAME LIKE '%S';
--2
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO = 30 AND JOB = 'SALESMAN';

SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO = 30
INTERSECT
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE JOB = 'SALESMAN';

--3-1
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO =20 AND SAL>2000 OR DEPTNO = 30 AND SAL>2000; 
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE (DEPTNO =20  OR DEPTNO = 30) AND SAL>2000; 
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO IN (20,30) AND SAL>2000; 
--3-2
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO =20 AND SAL>2000 
UNION ALL  
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO = 30 AND SAL>2000; 

SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO BETWEEN 20 AND 30
INTERSECT
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE SAL>2000;



--4
SELECT * FROM EMP WHERE SAL<2000 OR SAL>3000;

SELECT * FROM EMP
MINUS
SELECT * FROM EMP WHERE SAL>=2000 AND SAL<=3000;

--5
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE ENAME LIKE '%E%' AND DEPTNO=30
MINUS 
SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE SAL BETWEEN 1000 AND 2000;

SELECT * FROM EMP WHERE ENAME LIKE '%E%' AND SAL NOT BETWEEN 1000 AND 2000;


--6
SELECT * FROM EMP WHERE COMM IS NULL
INTERSECT
SELECT * FROM EMP WHERE MGR IS NOT NULL
INTERSECT 
SELECT * FROM EMP WHERE JOB IN ('MANAGER','CLERK')
INTERSECT 
SELECT*FROM EMP WHERE ENAME NOT LIKE ('_L%');

SELECT * FROM EMP WHERE COMM IS NULL AND MGR IS NOT NULL AND JOB IN('MANAGER','CLERK') AND ENAME NOT LIKE ('_L%');





